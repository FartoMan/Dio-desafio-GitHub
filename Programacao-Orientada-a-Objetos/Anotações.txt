Professor Thiago Leite
------- AULA 1 - Introdução
Objetivo:
Entender todos os conceitos relatiovs à Orientação a Objetos (OO).

Paradigma Orientado a Objeto: Java
!
Paradigma Estruturado: Linguagem C, Linux

Por que é melhor OO do que Estruturado?
Paradigma Estruturado tem uma representação mais simplista, já o Orientado a Objeto tem uma representação mais realista, voltada mais ao mundo real, com mecanismos mais completos.


------- AULA 2 - Por que usar?
PE > foca no "como fazer"
POO > "o que fazer", qual o problema

A orientação a objetos tem mais relação dos objetos entre si, mais próximo ao mundo real, sendo uma linguagem de mais Alto Nível, facilitando e melhorando o desenvolvimento de softwares.


------- AULA 3 - Fundamentos
O que é OO?

"A Orientação a Objetos é um paradigma de análise, projeto e programação de sistemas de software baseado na composição e interação entre diversas unidades de software chamadas de objetos." (Wikipedia)

 -- Pilares:

 - Abstração > isolar certas características de um objeto e assimilar, usar com outros objetos do mesmo grupo (pernas, assento e encosto = cadeira)

 - Reuso > Capacidade de criar novas unidades de códigos a partir de outras já existentes.

 - Encapsulamento > Esconder complexidades e protejer dados.


Exercícitando: Criar uma entidade LIVRO:
LIVRO: Edição; Ano publicação; Quantidade páginas; Título; Idioma; Autor; Editora; ISBN; Tema


------- AULA 4 - Estrutura básica da OO
Classe; Atriuto; Método; Objeto; Mensagem
Elas são o pontapé inicial para se começar a trabalhar OO.

-- Classe
Unidade mínima e básica num paradigma de implementação de OO. Dentro da calsse são atribuídos os atirbutos, métodos e objetos. É a base.
É uma estrutura que abstrai um conjunto de objetos com características similares.

Exemplos: Bola, Carro, Viagem, Venda, COmputador, Comprador, Venda.
Coisas abstratas e concretas.


Dicas:
- Substantivos
- Nomes significativos
- Contexto deve ser considerado

Código:
class Carro { ... }


-- Atributo
Criado dentro da clase, é o elemento responsável por definir sua estrutura de dados. O conjuntos destes será responsável por representar as características da classe.

Exemplos:
Carro - cor; Bola - diametro; Venda - valor

Atributo x Variável
A: O que é próprio e peculiar a alguém ou alguma coisa. Invariável, própria de um personagem, representar um conceito do mundo real
V: Sujeito a variações ou mudanças; que pode variar; inconstante, instável. Utilizadas dentro de métodos. 

Dicas:
- Substantivos e adjetivos
- Nome significativos
- Contexto deve ser considerado
- Abstração
- Tipos de dados adequados

Código:
class Carro { int portas; }


-- Método
Pode trabalhar e manipular os atributos da classe. São criados para prestar alguma função de acordo com a necessidade.
São ações que fazem algo, utilizados como se fossem verbos.

Métodos especiais:
- Construtor: Constrói objetos apartir das classes. Se necessário, ele pode conter parâmetros iniciais
NOTA: Em java, o Construtor é obrigatório ser igual ao nome da classe.
Ex.: class Carro { Carro() { ... } } 
- Destrutor: auxilia na destruição do objeto. Limpa o 'lixo'. Ele sempre será "void finalize". No java, sempre há um processo de se eliminar objetos ociosos, assim, ele chama esse destrutor.
Ex.: class Carro { void finalize() { ... } }

Sobrecarga:
Mudar a assinatura de acordo com a necessidade. Assinatura: nome+parâmetros
Ex.:
m1(); m1(int i); m1(float f); m1(String s, long l); m1(long l, String s);

Criação:
- Visibilide; Retorno; Nome; Parâmetros;

Dicas:
- Verbos
- Nome significativos
- Contexto deve ser considerado

Códigos:
class Carro { void frear() { ... } }


--Objeto
É a representação de um conceito/entidade do mundo real, pode ser física (bola, carro, árvore...) ou conceitual (viagem...). O objeto é o que realmente é executado pelo programa, a Classe serve de molde para o Objeto, mas o que realmente armazena valores é o Objeto(s).

Códigos:
Carro carro = new Carro();
=
Classe variável(doTipoCarro) = operadorNew Construtor();


--Mensagem
Processo de ativação de um método, é a solicitação que um método executa para ser feita a execução de seu comportamento descrito por sua clase.

Códigos:
Carro carro = new Carro(); // Criação do objeto
carro.<método>; // Chamando via objeto
Carro.<método>; // Chamando via classe

Dicas:
- Pesquisar Instância x Estático: atributos e métodos
- Estado de um Objeto
- Identidade de um Objeto
- Representação numérica
- Representação padrão de um Objeto




------- AULA 5 - As relações: Herança, Associação e Interface

--Herança
Relacionamento entre classes em que uma classe chamada de subclasse é uma extensão, um subtipo, de outra classe chamada classe base. É um tipo mais especializado a partir de outro já criado. Além do que herdou, ela pode definir seu próprios membros.

NOTA: Nem tudo que está atribuído na Classe Mãe é visto nas subclasses.

Códigos:
class A extends B { ... }


--Tipos de herança: 
- Simples: tem só uma classe mãe (Funcionário [gerente, vendedor, faxineiro])
- Multipla: A classe filha tem uma ou mais classes mãe  (estudante, funcionário [estagiário]) (NÃO SE APLICA A JAVA)

Obs.: Herança multipla não se aplica a Java por conta de conflito em nomes dos atributos, variáveis etc.


--Upcast e Downcast
Ex.:
Classe mãe: Funcionário
Subclasses: Gerente, Vendedor Faxineiro

Upcast: Se eu transformo o Gerente num Funcionário, ou seja, se eu passo um específico para algo mais genérico
-Código:
A a = new B(); > implicito


Downcast: Se eu transformo o Funcionário em um Gerente, ou seja, seu eu especifico algo genérico.
-Códigos:
B a = (B)new A(); > explícito


--Polimorfismo
Um mesmo método se comportar de forma diferente. Acaba sendo por herança.

Ex.: Pagamento pode ser processado por várias subclasses, são elas boleto, crédito, débito, pix... Isso é um exemplo de polimorfismo, pois todos tem a ação Processar que se comporta de forma diferente, de acordo com a instânica em questão.

(Pagamento [Boleto] [crédito] [débito] [PIX])


--Sobrescrita
A possibilidade de um método se comportar se forma diferente.

Ex.: (Conta [Corrente][Poupança][Especial][Universitária])


--Associação
Possibilita uma relação entre classes/objetos para pedir ajuda para se usarem mutuamente, interagindo entre si.

Tipos:
- Estrutural (atributos): Composição, Agregação
- Comportamental (métodos): Dependência

-- Associação Esturutal:
Composição: Com Parte Todo
Ex.: Pessoa e Endereço
Código:
class Pessoa { Endereco endereco; }

Agregação: Sem Parte Todo
Ex.: Disciplina e Aluno
Código:
class Disciplina { Aluno aluno; }

Relação entre Agregação x Composição:
Na composição, os dois tipos dependem fortemente um do outro, a classe do objeto, o objeto da classe. Na agregação é menos dependente.

-- Associação Comportamental:
Dependência: "Depende de"
Ex.: Compra e Cupom
Código:
class COmpra { ... finalizar(Cupom cupom, ...) }

Relação Herança x Associação
Herança é mais rígida, hereditário, quando a classe é criada já é pensada a sua herança. A Associação é um pouco mais flexível.


--Interface
Define um contrato que deve ser seguido pela classe que a implementa. Quando uma classe implementa uma inferface, ela se compromete a realizar todos os comportamentos que a interface disponibiliza.

É o que permite, por exemplo, uma impressora executar seus métodos em 3 Sistemas Operacionais diferentes. Ela executa os mesmos métodos para cada um.

Código:
interface A { ... }
class B implementes A { ... }

------- AULA 6 - A Organização de Pacotes e Visibilidade
--Pacotes
Organização física (pastas) ou lógica (classes utilitárias).

Código:
package NomeDoPacote;

import NomeDeClasseEmOutroPacote;

--Visibilidades (ou Modificadores de Acesso)
Determinar até que ponto uma classe, atributo ou método podem ser usados. É fundamental para o uso da Orientação a Objetos.

Tipos:
- Private: só dentro da classe
Código: private int i;
- Protected: Dentro da classe, mesmo pacote e subclasses
Código: protected void do();
- Public: Em qualquer lugar
Código: public int i;


DICAS DO QUE ESTUDAR:
- Padrões de Projeto (Desing Patterns)
- Boa p´raticas:SOLID, código, tecnicas de programação, etc.
- Refatoração
- UML
- Frameworks
- MUITA prática e estudo

