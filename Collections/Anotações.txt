Collections:
é um objeto que agrupa múltiplos elementos (variáveis primitivas ou objetos) dentro de uma única unidade.


Composição
Interfaces:
- Map > HashMap 
- Set
- List > Vector > Iterator

Implementações

Algorítimos

Criando uma lista:
- List<Tipo> variável = new ArrayList/LinkedList<>();
<<O Tipo deve estar em CamelCase>>
Ex.: List<Double> notas = new ArrayList<>();

Criação e manipulação: 
lista.add = Adiciona um elemento à lista
.indexOf = Descobre a posição do elemento na lista
.set = Troca o valor de uma posição por outro valor
.get = Exibe o valor em uma posição
.iterator = chama o iterator
.size = Quantidade de valores dentro da List
.remove(3d) = remover um valor específico
.remove(3) = remove o valor da posição 3 (0, 1, 2, 3)
.clear = limpa toda a lista (NÃO APAGA A LISTA)
.isEmpty = checa se está vazia (boolean)

Iterator = Percorre a Collection, sendo que ele assume cada posição e sabe seus valores, permitindo a alteração e remoção de um valor (ou vários, num laço, por exemplo)

Collections.min(lista) = Exibe o menor valor dentro de uma Colleciton

Collections.max(collection) = Exibe o maior valor

-=-=-=-=-=-=-=-=-
Ordenação:
Comparator
Comparable
lista.sort
-=-=-=-=-=-=-=-=-

SET - java.util.Set


- HashSet > elementos de forma aleatória, não repete iguais
- LinkedHashSet > elem. por ordem de inserção (não repete iguais)
- TreeSet > elem. por ordem natural (crescente) (não repete iguais)

Criando um Set:
- Set<Tipo> var - new HashSet<>();
Trabalhando com iterator (ver doc.):
Iterator<> var2 = var.iterator();

var.toString
.contains(elem.) 
.iterator
.remove
.size
.clear
.isEmpty

Collections.min(var) > exibe o elemento mínimo
Collecitons.max(var) > exibe o elemento máximo

-=-=-=-=-=-=-=-=-
Ordenação:
Comparator
Comparable
lista.sort
-=-=-=-=-=-=-=-=-

MAP - java.util.Map
Não faz parte do Collection;
É um objeto

* key (elemento único)
* valor (value)
* Big O notation [link=https://www.baeldung.com/java-algorithm-complexity]

- Hashtable
- HashMap > LinkedHashMap
- TreeMap

Criando um Map:
Map<Key, Tipo> var = new HashMap<>() {{ ... }}
Ex.: Map<String, Double> carrosPop = new HashMap<>();

.put
.toString
.containsKey
.get
.size
.iterator
.values 


Streams API <------------------<<<<<<<<<<<<<<<<<

- Classe anônima
- Functional Interface > Comparator; Consumer; FUnction; Predicate
- Lambda > sintaxe: (argumento) -> (corpo);
- Reference Method > Uso :: (simplificar uma Lambda)
Ex.: (Comparator.comparting(Gato::getNome));


Steams API << Pesquisar



