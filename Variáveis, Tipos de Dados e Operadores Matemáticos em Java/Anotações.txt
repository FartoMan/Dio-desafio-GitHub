Professor: Thiago Leite e Carvalho

------- AULA 1 - Conceituação e criação

Entender e criar variaveis

O que é uma Variável:
Um espaço na memório do computador onde se pode guardar valores. Pede-se ao computador que guarde um espaço para armazenar valores.

Tipos, no Java:
Instância: objeto
Classe: classe
Local: dentro do método - Metodo "main" que criamos as variáveis iniciais
Parâmetro: na assinatura do método

----
Padrão de definição:
<?visibilidade?> <?modificador?> tipo nome <?=valorInicial?>; (entre ?? são opcionais)
Ex.: int contagem = 1;

V visibilidade: "public", "protected" e "private"
Estão ligadas a orientação a objeto
M: "static" e "final"
static ligado a orientação a objeto.
"final" quer dizer a variavel é contante, ou seja, o valor da variável não é alterado
T tipo de dado: sempre tem que informar  o tipo da variável
N: identificador da variável
VI: valor inicial da variável
----

----
Regras e convenções na criação de variável:
- Não devem começar com números;
- "$" e "_" devem ser evitados, mas permitidos;
- São case-sensitive (m M)
Ex.: int 
- Sem espaços;
- Não pode ser as palavras reservadas do Java

Exemplos de variáveis:
int i; 
int I; (completamente diferente da anterior)
int 1a; (NÃO PERMITIDA, gera erro de compilação)
int _1a; (não é uma boa prática, não gera erro de compilação)
int I = 10 (valor inicial definido)
int final j = 10 (variável constante, se tentar alterar o valor da variável, será gerado um erro de compilação)
int asrn24678md;
int asrn246 78md; (NÃO PERMITIDA pelo espaço)
----

Boas práticas na criação de variáveis
- Lembrar que é um trabalho de equipe;
- Sempre começar com a letra minúsculas;
- Nomes expressivos para identificar facilmente a função daquela variável
- Notação camelo (minúsculaMaiúscula)
- Quando constante(final) maiúscula e separada por "_"

Ex.:
int quantidadeProduto;
int final NUMERO_TENTATIVAS = 5;
int i; (bom para opções descartáveis, no caso do "for", usando a "int i" como contador)

-------
Exercitando: aulaumvariaveis.java



------- AULA 2 - Tipos de dado

Entender o que são tipos de dados e quando usá-los

Tipos de dados: são os valores e consequentemente operações que as variáveis podem assumir e sofrer, respecftivamente.

Tipificação:
- Estática(forte) vs Dinâmica(fraco)
Estática: quando uma linguagem obriga a definir o tipo de dado
Dinâmica: Não é obrigado. Durante a execução, o programa identifica e assume o tipo
- Primitivo vs Composto
Primitivos: valores numericos, textuais. Tipo de dado Homogeneo
Composto: ligado a orientação a objeto. Tipo de dado Heterogeneo

----
Tipos de dados:
- Textual
Ex.: char c = 'T'
String (primitivado)

- Numeral
Ex.: byte: -128 até 127 -> byte b = 15;
     short: -32.768 até 32.767 -> 

NOTA > Float e double são variaveis de números reais, fracionados

- Lógico
Ex.: Boolean True or False

- Objeto

Tipo de dado	| Valor default
-------------------------------
byte 		| 0
short 		| 0
int		| 0
long		| 0L
float		| 0.0f
double		| 0.0d
char		| '\u0000'
String		| null
boolean		| false

----

Boas práticas
Usar de forma adequada cada tipo de dado para cada informação, ou seja, desde o início saber qual tipo

------- AULA 3 - Operadores Aritméticos

Entender o que são e saber como utilizar.

Para todas as linguagens de programação, são símbolos especiais que são capazes de realizar ações específicas em um, dois ou mais operandos e, em seguida, retornar um resultado.

Tipos:
- pós-fixado: exp++ ou exp-- (soma ou subtrai, atuando no operando expecificado)
- prefixado: ++exp ou --exp (como é pré, ele soma ou subtrai antes de ver a expressão)
- aritmético: +, -, *, / e %
- atribuição: =, +=, -=, *=, /=, %=

Ex.:
int i = ++k; -> i = k + 1;	
int j = k--; -> j = k;k = k-1;	
float f = 1.5f + 4.5f;
long l = 10398L * 5L;
double d = 45d / 4d;
int k = 15 % 4;
double d = f;
i +=5; -> i = i + 5;
j -=3; ->j = j - 3;
d /= 2.7d; -> d = d / 2.7d;
l *= 3; -> l = l * 3;
k %= 2; -> k  = k % 2;

Ordem de precedência (calculo realizado primeiro):
Pós-fixado	exp++, exp--
Préfixado	++exp, --exp
Multiplicação	*, /, %
Aditivo		+, -
Atribuição	=, +=, -=, *=, /=, %=

------- AULA 4 - Conversões(casting)
Entender o que é casting, seus tipos e saber quando e como usar

Casting: É a transformação de uma determinada variável de tipo menos específico para um tipo mais específico ou vice-versa.

Tipos:
Upcast(implícito) - converte para um tipo de dado que suporta mais dado, (implícito, não é necessário dizer para qual tipo de variável será transformado, pois é implícito)
Downcast(explícito) - converte para um tipo de dado de menor capacidade de representação e armazenamento (já aqui, é necessária a especificação)

Ex.:
long l; int i = 10; l = i; 
int i; long l = 100; i = (int) l;
double d; float f = 10.5f; d = f;
float f; double d= 10.5d; f = (float) d;
int i; float f = 10.5f; i = (int) f;

NOTA: Tanto em tipos primitivos e objetos


